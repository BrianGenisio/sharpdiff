using System.Collections.Generic;
using OMetaSharp;

ometa SharpDiff.DiffParser : Parser {
	Diff			= Header:header NewLine IndexHeader NewLine Chunk:chunk
																		-> { new Diff(header.As<Header>(), chunk.As<Chunk>()) },
	Header			= "diff" Space FormatType:format FileDefs:files		-> { new Header(format.As<FormatType>(), files.ToIEnumerable<FileDef>()) }
					| "diff" Space FormatType:format					-> { new Header(format.As<FormatType>()) },
	IndexHeader		= "index" Space HashRange:range Space Number:mode	-> { new IndexHeader(range.As<HashRange>(), mode.As<int>()) },
	Chunk			= ChunkHeader:header NewLine ChunkRange:range NewLine DiffLines:lines
																		-> { new Chunk(header.As<ChunkHeader>(), range.As<ChunkRange>(), lines.ToIEnumerable<ILine>()) }
					| ChunkHeader:header NewLine ChunkRange:range		-> { new Chunk(header.As<ChunkHeader>(), range.As<ChunkRange>(), new List<ILine>()) },
	
					
	ChunkHeader		= "---" FileDef:originalFile NewLine "+++" FileDef:newFile
																		-> { new ChunkHeader(originalFile.As<FileDef>(), newFile.As<FileDef>()) },
	ChunkRange		= "@@" Space ChangeRange:originalRange Space ChangeRange:newRange Space "@@"
																		-> { new ChunkRange(originalRange.As<ChangeRange>(), newRange.As<ChangeRange>()) },
	ChangeRange		= "+" Number:line "," Number:affected				-> { new ChangeRange(line.As<int>(), affected.As<int>()) }
					| "-" Number:line "," Number:affected				-> { new ChangeRange(line.As<int>(), affected.As<int>()) },
	DiffLines			= AnyLine+:lines									-> { lines },
	AnyLine				= ContextLine
						| AdditionLine
						| SubtractionLine
						| NoNewLineAtEOFLine,
	ContextLine			= Space Line:value									-> { new ContextLine(value.As<string>()) },
	AdditionLine		= "+" Line:value									-> { new AdditionLine(value.As<string>()) },
	SubtractionLine		= "-" Line:value									-> { new SubtractionLine(value.As<string>()) },
	NoNewLineAtEOFLine	= '\\' Space "No newline at end of file" NewLine	-> { new NoNewLineAtEOFLine() }
						| '\\' Space "No newline at end of file"			-> { new NoNewLineAtEOFLine() },
	Line				= Text:value NewLine								-> { value.As<string>() },
	FileDefs		= FileDef+:files									-> { files },
	FileDef			= Space Letter:letter "/" Filename:filename			-> { new FileDef(letter.As<char>(), filename.As<string>()) }
					| Letter:letter "/" Filename:filename				-> { new FileDef(letter.As<char>(), filename.As<string>()) },
	FormatType		= "--" LetterOrDigits:format						-> { new FormatType(format.As<string>()) },
	HashRange		= LetterOrDigits:first ".." LetterOrDigits:second	-> { new HashRange(first.As<string>(), second.As<string>()) },
	Filename		= LetterOrDigits:filename "." LetterOrDigits:extension
																		-> { filename + "." + extension }
					| LetterOrDigits:filename							-> { filename },
	Text			= (~NewLine Character)+:t							-> { t.As<string>() },
	LetterOrDigits	= LetterOrDigit+:i,
	Number		   ^= Digit+:ds<string>									-> { int.Parse(ds) },
	NewLine			= '\r' '\n'
					| '\n'
}